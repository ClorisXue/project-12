// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int heap_base;
    static int heap_end;
    static Array memory;
    static Array free_list;
    static Array no_block;

    static int free_length, free_next, alloc_size;

    /** Initializes the class. */
    function void init() {
        let heap_base = 2048;
        let heap_end = 16384;
        let memory = 0;
        let free_length = 0;
        let free_next = 1;
        let alloc_size = -1;
        let free_list = heap_base;
        let no_block = heap_end;
        let free_list[free_length] = heap_end - heap_base;
        let free_list[free_next] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array prev_block, found_block;
        let prev_block = Memory.best_fit(size);
        if (prev_block = no_block) {
	let found_block = null;
        }
        else {
            if( prev_block = null ) {
                let found_block = free_list;
                let free_list = Memory.do_alloc(found_block, size);
            }
            else {
                let found_block = prev_block[free_next];
                let prev_block[free_next] = Memory.do_alloc(found_block, size);
            }
        }
        return found_block+1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int alloc_size;
        var Array prev_block;
        var Array next_block;
        
        let alloc_size = o[alloc_size];
        let o = o - 1; 
        let prev_block = Memory.find_prev_free(o);
        
        if( prev_block = null ) { 
            let o[free_length] = alloc_size;
            let o[free_next] = free_list;
            let free_list = o;
            let prev_block = o;
        }
        else {
            if( (prev_block + prev_block[free_length]) = o ) {
                let prev_block[free_length] = prev_block[free_length] + alloc_size;
            }
            else {
                let o[free_length] = alloc_size;
                let o[free_next] = prev_block[free_next];
                let prev_block[free_next] = o;
                let prev_block = o;
            }
        }
        
        if( (prev_block + prev_block[free_length]) = prev_block[free_next] ) {
            let next_block = prev_block[free_next];
            let prev_block[free_length] = prev_block[free_length] + next_block[free_length];
            let prev_block[free_next] = next_block[free_next];
        }
        return;
    } 

    function int best_fit(int size) {
        var Array best_block;
        var Array prev_block;
        var Array cur_block;
        var int best_size;
        var int cur_size;
        let best_block = no_block;
        let best_size = heap_end - heap_base;
        let cur_block = free_list;
        let prev_block = null;
   
        while( ~(cur_block = null) ) {
            let cur_size = cur_block[free_length]-1;
            if( ~(cur_size < size) & (cur_size < best_size) ) {
                let best_block = prev_block; 
                let best_size = cur_size;
            }
            let prev_block = cur_block;
            let cur_block = cur_block[free_next];
        }
        return best_block;
    }   

    function Array do_alloc(Array found_block, int size) {
        var Array next_block;
        var int block_size;
        
        if( found_block[free_length] > (size+1+2) ) {
            let next_block = found_block + size+1;
            let next_block[free_next] = found_block[free_next];
            let next_block[free_length] = found_block[free_length] - (next_block - found_block);
            let found_block = found_block + 1; 
            let found_block[alloc_size] = size+1;
        }
        else { 
            let next_block = found_block[free_next];
            let block_size = found_block[free_length];
            let found_block = found_block + 1; 
            let found_block[alloc_size] = block_size;
        }     
        return next_block;
    }

    function Array find_prev_free(Array object) {
        var Array block;
        if( free_list > object ) {
            return null;
        }
        let block = free_list;
        while( ~(block[free_next] = null) & (block[free_next] < object) ) {
            let block = block[free_next];
        }
        return block;
    }
}
