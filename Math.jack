// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int bit_array;

    /** Initializes the library. */
    function void init() {
        let bit_array = Array.new(16);
        let bit_array[0] = 1;
        let bit_array[1] = 2;
        let bit_array[2] = 4;
        let bit_array[3] = 8;
        let bit_array[4] = 16;
        let bit_array[5] = 32;
        let bit_array[6] = 64;
        let bit_array[7] = 128;
        let bit_array[8] = 256;
        let bit_array[9] = 512;
        let bit_array[10] = 1024;
        let bit_array[11] = 2048;
        let bit_array[12] = 4096;
        let bit_array[13] = 8192;
        let bit_array[14] = 16384;
        let bit_array[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
	return x;
        }
        else {
	return -x;
        }
    }

    function boolean bit(int n, int i) {
        return ~((n & bit_array[i]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shifted, x_, y_, i;
        let sum = 0;
        let shifted = x;
        let x_ = Math.abs(x);
        let y_ = Math.abs(y);
        while (i < 16) {
	if (Math.bit(y_, i)) {
	    let sum = sum + shifted;
	}
	let shifted = shifted + shifted;
	let i = i + 1;
        }
        if (((x > 0) & (y < 0)) | ((x < 0) & (y > 0))) {
	let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int quo, x_, y_, result;
        var boolean neg;
        let x_ = Math.abs(x);
        let y_ = Math.abs(y);
        let neg = false;
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
	let neg = true;
        }
        if (y_ = 0) {
	do Sys.error(3);
        }
        if (x_ < y_) {
	return 0;
        }
        let quo = Math.divide(x_, (y_ + y_));
        if ((x_ - (2 * quo * y_)) < y_) {
	let result = quo + quo;
        }
        else {
	let result = quo + quo + 1;
        }
        if (neg) {
	let result = -result;
        }
        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp, temp_;
        let y = 0;
        let j = 7;
        if (x < 0) {
	do Sys.error(4);
        }
        while (j > -1) {
	let temp = y + bit_array[j];
	let temp_ = temp * temp;
	if (~(temp_ > x) & (temp_ > 0)) {
	    let y = temp;
	}
	let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
	return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
	return a;
        }
        return b;
    }

    function int pow(int i ) {
        return bit_array[i];
    }
}
