// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screen_high, screen_wide;
    static boolean color;
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
//        var int i;
 //       let i = 1;
        let screen_high = 256;
        let screen_wide = 512;
        let color = true;
        let screen = Array.new(16);
        let screen[0] = 1;
        let screen[1]  = 2;
        let screen[2]  = 4;
        let screen[3]  = 8;
        let screen[4]  = 16;
        let screen[5]  = 32;
        let screen[6]  = 64;
        let screen[7]  = 128;
        let screen[8]  = 256;
        let screen[9]  = 512;
        let screen[10] = 1024;
        let screen[11] = 2048;
        let screen[12] = 4096;
        let screen[13] = 8192;
        let screen[14] = 16384;
        let screen[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, (screen_wide - 1), (screen_high - 1));
        do Screen.setColor(true);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int row, col, bit, address, value;
        let row = y;
        let col = x;
        if ((col < 0) | (col > (screen_wide - 1)) | (row < 0) | (row > (screen_high - 1))) {
	do Sys.error(7);
        }
        let bit = col - ((col / 16) * 16); //col % 16
        let address = 16384 + (row * 32) + (col / 16);
        let value = Memory.peek(address);
        if (color) {
	let value = value | screen[bit];
        }
        else {
	let value = value & ~screen[bit];
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, distance_x, distance_y, temp;
        if ((x1 < 0) | (x1 > (screen_wide - 1)) | (y1 < 0) | (y1 > (screen_high - 1)) | 
            (x2 < 0) | (x2 > (screen_wide - 1)) | (y2 < 0) | (y2 > (screen_high - 1))) {
	do Sys.error(8);
        }
        //draw horizontal line
        if (y1 = y2) {
	if (x1 > x2) {
	    let temp = x1;
	    let x1 = x2;
	    let x2 = temp;
	}
	while (~(x2 < x1)) {
	    do Screen.drawPixel(x1, y1);
	    let x1 = x1 + 1;
	}
	return;
        }
        //draw vertical line
        if (x1 = x2) {
	if (y1 > y2) {
	    let temp = y2;
	    let y2 = y1;
	    let y1 = temp;
	}
	while (~(y2 < y1)) {
	    do Screen.drawPixel(x1, y1);
	    let y1 = y1 + 1;
	}
	return;
        }
        //draw diagnoa line
        if (x1 > x2) {
	let temp = x1;
	let x1 = x2;
	let x2 = temp;
	//if (y1 > y2) {
	    let temp = y2;
	    let y2 = y1;
	    let y1 = temp;
	//}
        }
        let distance_x = x2 - x1;
        let distance_y = y2 - y1;
        let temp = 0;
        let a = 0;
        let b = 0;
        while ((a < distance_x) & (b < distance_y)) {
            let temp = (a * distance_y) - (b * distance_x);
            if (temp < 0) {
	    let a = a + 1;
            }
            else {
	   let b = b + 1;
            }
             do Screen.drawPixel(x1 + a, y1 + b);
        }
        while ((a < distance_x) & (b > distance_y)) {
            let temp = (a * distance_y) - (b * distance_x);
            if (temp > 0) {
	    let a = a + 1;
            }
            else {
	   let b = b - 1;
            }
             do Screen.drawPixel(x1 + a, y1 + b);
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int distance_x, distance_y, a, b;
        if ((x1 < 0) | (x1 > (screen_wide - 1)) | (y1 < 0) | (y1 > (screen_high - 1)) | 
            (x2 < 0) | (x2 > (screen_wide - 1)) | (y2 < 0) | (y2 > (screen_high - 1))) {
	do Sys.error(9);
        }

        let a = 0;
        let b = 0;
        let distance_x = x2 - x1;
        let distance_y = y2 - y1;
        while (b < distance_y) {
	while (a < distance_x) {
	    do Screen.drawPixel(x1 + a, y1 + b);
	    let a = a + 1;
	}
	let a = 0;
	let b = b + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int distance_y, sqrt, a, b, c;
        if ((x < 0) | (x > (screen_wide - 1)) | (y < 0) | (y > (screen_high - 1))) {
	do Sys.error(12);
        }

        if ((r < 0) | (r > 127) | ((x - r) < 0) | ((x + r) > (screen_wide - 1)) |
           ((y - r) < 0) | ((y + r) > (screen_high - 1))) {
	do Sys.error(13); 
        }
        let distance_y = -r;
        while (~(distance_y = r)) {
	let sqrt = Math.sqrt((r * r) - (distance_y * distance_y));
	let a = x - sqrt;
	let b = x + sqrt;
	let c = y + distance_y;
	do Screen.drawLine(a, c, b, c);
	let distance_y = distance_y + 1;
        }
        return;
    }
}
