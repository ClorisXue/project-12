// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, max_length;
    field Array data;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
	do Sys.error(14);
        }
        let max_length = maxLength + 1;
        let data = Array.new(max_length);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do data.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > (length - 1))) {
	do Sys.error(15);
        }
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > (length - 1))) {
	do Sys.error(16);
        }
        let data[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length = max_length) {
	do Sys.error(17);
        }
        if (length = 0) {
	let length = 1;
	let data[0] = c;
        }
        else {
	let data[length] = c;
	let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
	do Sys.error(18);
        }
        let length = length - 1;
        let data[length] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, res;
        let res = 0;

        if (data[0] = 45) {
            let i = 1; 
        } else {
            let i = 0;
        }

        while (i < length) {
            let res = (10 * res) + (data[i] - 48);
            let i = i + 1;
        }

        if (data[0] = 45) {
            return -res;
        }
        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int number) {
        var int digit, exp;
        //reset the array
        let length = 0;
        if (number < 0) {
	let number = -number;
	if (length = max_length) {
	    do Sys.error(19);
	}
	do appendChar(45);
        }
        while (number > 0) {
            let digit = number;
            let exp = 1;
            while (digit > 9) {
	let digit = digit / 10;
	let exp = exp * 10;
            }
            let number = number - (exp * digit);
            do appendChar(digit + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128; // 128 is '\n'
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129; // 129 is ' '
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34; // 34 is '"'
    }
}
